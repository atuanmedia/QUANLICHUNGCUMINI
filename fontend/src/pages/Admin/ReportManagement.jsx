import React, { useEffect, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faEye, faTrash } from "@fortawesome/free-solid-svg-icons";
import { useAuth } from "../../context/AuthContext";
import Swal from "sweetalert2";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "../../styles/admin/componentadmin.css";
import api from "../../api/api";

const ReportManagement = () => {
  const { user } = useAuth();
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filterStatus, setFilterStatus] = useState("all");

  // üîí Escape HTML ƒë·ªÉ tr√°nh l·ªói hi·ªÉn th·ªã HTML trong popup
  const escapeHtml = (unsafe) =>
    unsafe
      ?.replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");

  // üü¢ L·∫•y danh s√°ch ph·∫£n √°nh
  const fetchReports = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");
      const { data } = await api.get("/reports", {
        headers: { Authorization: `Bearer ${token}` },
        params: { status: filterStatus === "all" ? "" : filterStatus },
      });
      setReports(data);
      toast.success(`üìã ƒê√£ t·∫£i ${data.length} ph·∫£n √°nh th√†nh c√¥ng!`);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i ph·∫£n √°nh:", err);
      toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph·∫£n √°nh!");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user?.role === "admin") fetchReports();
  }, [user, filterStatus]);

  // üëÅÔ∏è Xem chi ti·∫øt ph·∫£n √°nh (popup ƒë·∫πp + fix l·ªói kh√¥ng ƒë√≥ng ƒë∆∞·ª£c)
  const handleViewDetail = (report) => {
    Swal.fire({
      title: `üì¢ ${escapeHtml(report.title || "Ph·∫£n √°nh")}`,
      html: `
        <div style="text-align:left; line-height:1.6">
          <p><b>üë§ Ng∆∞·ªùi g·ª≠i:</b> ${escapeHtml(report.resident?.fullName || "N/A")}</p>
          <p><b>üè† CƒÉn h·ªô:</b> ${escapeHtml(report.apartment?.apartmentCode || "N/A")}</p>
          <p><b>üìÖ Ng√†y g·ª≠i:</b> ${new Date(report.createdAt).toLocaleDateString("vi-VN")}</p>
          <hr style="margin:10px 0"/>
          <p style="white-space:pre-line;"><b>N·ªôi dung:</b><br/>${escapeHtml(
            report.content || "(Kh√¥ng c√≥ n·ªôi dung)"
          )}</p>
          ${
            report.images && report.images.length > 0
              ? `<img src="${report.images[0]}" alt="·∫¢nh ph·∫£n √°nh" style="margin-top:10px;border-radius:8px;max-height:200px;object-fit:cover"/>`
              : ""
          }
        </div>
      `,
      confirmButtonText: "ƒê√≥ng",
      width: "600px",
      background: "#fff",
      color: "#111",
      confirmButtonColor: "#2563eb",
      allowOutsideClick: true, // ‚úÖ click ra ngo√†i ƒë·ªÉ ƒë√≥ng
      allowEscapeKey: true, // ‚úÖ nh·∫•n ESC ƒë·ªÉ ƒë√≥ng
      didOpen: () => {
        // ‚úÖ √âp z-index sau khi popup m·ªü
        const swalContainer = document.querySelector(".swal2-container");
        if (swalContainer) swalContainer.style.zIndex = "99999";
      },
    });
  };

  // üóëÔ∏è Xo√° ph·∫£n √°nh
  const handleDelete = async (reportId) => {
    const confirm = await Swal.fire({
      title: "B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ph·∫£n √°nh n√†y?",
      text: "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#e74c3c",
      cancelButtonColor: "#6c757d",
      confirmButtonText: "Xo√°",
      cancelButtonText: "Hu·ª∑",
      didOpen: () => {
        const swalContainer = document.querySelector(".swal2-container");
        if (swalContainer) swalContainer.style.zIndex = "99999";
      },
    });

    if (!confirm.isConfirmed) return;

    try {
      const token = localStorage.getItem("token");
      await api.delete(`/reports/${reportId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch
      setReports((prev) => prev.filter((r) => r._id !== reportId));
      toast.success("üóëÔ∏è ƒê√£ xo√° ph·∫£n √°nh th√†nh c√¥ng!");
    } catch (err) {
      console.error("‚ùå L·ªói xo√° ph·∫£n √°nh:", err);
      toast.error("Kh√¥ng th·ªÉ xo√° ph·∫£n √°nh, vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  if (loading)
    return (
      <div className="loading-overlay">
        <div className="spinner"></div>
        <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
      </div>
    );

  return (
    <div className="resident-page fade-in">
      <h2 className="resident-title">üìã Qu·∫£n l√Ω ph·∫£n √°nh & b√°o c√°o</h2>

      {/* B·ªô l·ªçc tr·∫°ng th√°i */}
      <div className="filter-status">
        <label>L·ªçc theo tr·∫°ng th√°i:</label>
        <select
          value={filterStatus}
          onChange={(e) => setFilterStatus(e.target.value)}
        >
          <option value="all">T·∫•t c·∫£</option>
          <option value="pending">Ch·ªù x·ª≠ l√Ω</option>
          <option value="in_progress">ƒêang x·ª≠ l√Ω</option>
          <option value="resolved">ƒê√£ gi·∫£i quy·∫øt</option>
          <option value="cancelled">ƒê√£ h·ªßy</option>
        </select>
      </div>

      {/* B·∫£ng ph·∫£n √°nh */}
      <div className="resident-table animate-fade">
        <table>
          <thead>
            <tr>
              <th>Ti√™u ƒë·ªÅ</th>
              <th>Ng∆∞·ªùi g·ª≠i</th>
              <th>CƒÉn h·ªô</th>
              <th>Ng√†y g·ª≠i</th>
              <th>Tr·∫°ng th√°i</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {reports.length === 0 ? (
              <tr>
                <td colSpan="6" className="no-data">
                  Kh√¥ng c√≥ ph·∫£n √°nh n√†o
                </td>
              </tr>
            ) : (
              reports.map((r) => (
                <tr key={r._id}>
                  <td>{r.title}</td>
                  <td>{r.resident?.fullName || "N/A"}</td>
                  <td>{r.apartment?.apartmentCode || "N/A"}</td>
                  <td>{new Date(r.createdAt).toLocaleDateString("vi-VN")}</td>
                  <td>
                    <span
                      className={`badge ${
                        r.status === "resolved"
                          ? "badge-green"
                          : r.status === "in_progress"
                          ? "badge-blue"
                          : r.status === "cancelled"
                          ? "badge-red"
                          : "badge-yellow"
                      }`}
                    >
                      {r.status === "pending"
                        ? "Ch·ªù x·ª≠ l√Ω"
                        : r.status === "in_progress"
                        ? "ƒêang x·ª≠ l√Ω"
                        : r.status === "resolved"
                        ? "ƒê√£ gi·∫£i quy·∫øt"
                        : "ƒê√£ h·ªßy"}
                    </span>
                  </td>
                  <td className="action-buttons">
                    <button
                      className="btn-view"
                      onClick={() => handleViewDetail(r)}
                      title="Xem chi ti·∫øt ph·∫£n √°nh"
                    >
                      <FontAwesomeIcon icon={faEye} className="icon-view" />
                    </button>
                    <button
                      className="btn-delete"
                      onClick={() => handleDelete(r._id)}
                      title="X√≥a ph·∫£n √°nh"
                    >
                      <FontAwesomeIcon icon={faTrash} className="icon-delete" />
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ReportManagement;
