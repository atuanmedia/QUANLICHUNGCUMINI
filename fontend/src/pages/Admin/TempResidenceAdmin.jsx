import React, { useEffect, useState } from "react";
import api from "../../api/api"; // ‚úÖ axios instance c√≥ interceptor
import { FaFilePdf, FaTrash } from "react-icons/fa";
import "../../styles/admin/temp-residence.css";
// import "../../styles/admin/componentadmin.css"; // optional n·∫øu b·∫°n mu·ªën ƒë·ªìng nh·∫•t style

const TempResidenceAdmin = () => {
  const [records, setRecords] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchRecords();
  }, []);

  // ‚úÖ L·∫•y danh s√°ch h·ªì s∆°
  const fetchRecords = async () => {
    setLoading(true);
    try {
      console.log("üìÑ [TempResidenceAdmin] Fetching records...");
      const res = await api.get("/temp-residence"); // interceptor t·ª± g·∫Øn token
      setRecords(res.data || []);
      console.log("‚úÖ [TempResidenceAdmin] Loaded:", res.data.length);
    } catch (err) {
      console.error("‚ùå fetchRecords:", err);
      alert("‚ùå L·ªói khi t·∫£i danh s√°ch h·ªì s∆°!");
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ Xu·∫•t PDF
  const handleExportPDF = async (id, fullName) => {
    try {
      console.log("üì§ [TempResidenceAdmin] Exporting PDF...");
      const res = await api.get(`/temp-residence/${id}/export`, {
        responseType: "blob", // ‚öôÔ∏è ƒê·∫£m b·∫£o tr·∫£ file PDF
      });

      const blob = new Blob([res.data], { type: "application/pdf" });
      const link = document.createElement("a");
      link.href = window.URL.createObjectURL(blob);

      // üîπ ƒê·∫∑t t√™n file an to√†n
      const safeName = fullName
        ?.normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^a-zA-Z0-9_-]/g, "_");

      link.download = `giay_tam_tru_tam_vang_${safeName || "unknown"}.pdf`;
      link.click();
    } catch (err) {
      console.error("‚ùå Export PDF error:", err);
      alert("‚ùå L·ªói khi xu·∫•t PDF!");
    }
  };

  // ‚úÖ X√≥a h·ªì s∆°
  const handleDelete = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a h·ªì s∆° n√†y kh√¥ng?")) return;
    try {
      await api.delete(`/temp-residence/${id}`);
      alert("üóëÔ∏è ƒê√£ x√≥a h·ªì s∆° th√†nh c√¥ng!");
      fetchRecords(); // reload danh s√°ch
    } catch (err) {
      console.error("‚ùå Delete error:", err);
      alert("‚ùå X√≥a th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  return (
    <div className="resident-page fade-in">
      <h2 className="resident-title">üìã Qu·∫£n l√Ω T·∫°m tr√∫ / T·∫°m v·∫Øng</h2>

      {loading ? (
        <p className="loading-text">ƒêang t·∫£i d·ªØ li·ªáu...</p>
      ) : (
        <div className="resident-table">
          <table>
            <thead>
              <tr>
                <th>H·ªç t√™n</th>
                <th>Lo·∫°i</th>
                <th>Th·ªùi gian</th>
                <th>L√Ω do</th>
                <th>N∆°i ƒë·∫øn / t·∫°m tr√∫</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {records.length === 0 ? (
                <tr>
                  <td colSpan="6" className="no-data">
                    Kh√¥ng c√≥ h·ªì s∆° n√†o.
                  </td>
                </tr>
              ) : (
                records.map((r) => (
                  <tr key={r._id}>
                    <td>{r.resident?.fullName || "‚Äî"}</td>
                    <td>
                      <span
                        className={`badge ${
                          r.type === "tam_tru" ? "badge-blue" : "badge-yellow"
                        }`}
                      >
                        {r.type === "tam_tru" ? "T·∫°m tr√∫" : "T·∫°m v·∫Øng"}
                      </span>
                    </td>
                    <td>
                      {new Date(r.fromDate).toLocaleDateString("vi-VN")} ‚Üí{" "}
                      {new Date(r.toDate).toLocaleDateString("vi-VN")}
                    </td>
                    <td>{r.reason}</td>
                    <td>{r.place}</td>
                    <td className="action-buttons">
                      <button
                        className="btn-edit"
                        onClick={() =>
                          handleExportPDF(r._id, r.resident?.fullName)
                        }
                        title="Xu·∫•t PDF"
                      >
                        <FaFilePdf className="h-5 w-5 text-red-600" />
                      </button>
                      <button
                        className="btn-delete"
                        onClick={() => handleDelete(r._id)}
                        title="X√≥a h·ªì s∆°"
                      >
                        <FaTrash className="h-5 w-5 text-gray-600" />
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default TempResidenceAdmin;
