const asyncHandler = require("express-async-handler");
const TemporaryResidence = require("../models/TemporaryResidence");
const PDFDocument = require("pdfkit");
const path = require("path");
const fs = require("fs");

/**
 * üìã L·∫•y danh s√°ch h·ªì s∆° t·∫°m tr√∫ / t·∫°m v·∫Øng
 * GET /api/temp-residence
 */
const getAllRecords = asyncHandler(async (req, res) => {
  const records = await TemporaryResidence.find()
    .populate("resident", "fullName phoneNumber apartment")
    .populate({
      path: "resident",
      populate: { path: "apartment", select: "apartmentCode floor" },
    })
    .sort({ createdAt: -1 });

  res.json(records);
});

/**
 * ‚ûï T·∫°o h·ªì s∆° m·ªõi
 * POST /api/temp-residence
 */
const createRecord = asyncHandler(async (req, res) => {
  try {
    const { resident, type, fromDate, toDate, reason, place } = req.body;

    if (!resident || !type || !fromDate || !toDate || !reason || !place) {
      res.status(400);
      throw new Error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin t·∫°m tr√∫ / t·∫°m v·∫Øng");
    }

    const newRecord = await TemporaryResidence.create({
      resident,
      type,
      fromDate,
      toDate,
      reason,
      place,
      createdBy: req.user ? req.user._id : null,
    });

    const populated = await TemporaryResidence.findById(newRecord._id)
      .populate("resident", "fullName phoneNumber")
      .populate({
        path: "resident",
        populate: { path: "apartment", select: "apartmentCode floor" },
      });

    res.status(201).json(populated);
  } catch (err) {
    console.error("‚ùå L·ªói trong createRecord:", err);
    res.status(500).json({ message: err.message || "L·ªói khi t·∫°o h·ªì s∆°" });
  }
});

/**
 * üìÑ Xu·∫•t gi·∫•y t·∫°m tr√∫ / t·∫°m v·∫Øng (PDF)
 * GET /api/temp-residence/:id/export
 */
const exportPDF = asyncHandler(async (req, res) => {
  try {
    const record = await TemporaryResidence.findById(req.params.id)
      .populate("resident", "fullName dateOfBirth phoneNumber apartment")
      .populate({
        path: "resident",
        populate: { path: "apartment", select: "apartmentCode floor" },
      });

    if (!record) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h·ªì s∆°" });
    }

    const fontPath = path.join(__dirname, "../../fonts/TimesNewRoman_1.ttf");
    if (!fs.existsSync(fontPath)) {
      console.error("‚ö†Ô∏è Font kh√¥ng t·ªìn t·∫°i:", fontPath);
      return res.status(500).json({
        message: "Kh√¥ng t√¨m th·∫•y font TimesNewRoman_1.ttf trong th∆∞ m·ª•c fonts/",
      });
    }

    const cleanName = record.resident.fullName
      ?.normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/[^a-zA-Z0-9_-]/g, "_");

    const filename = `to_khai_cu_tru_${cleanName}.pdf`;

    res.setHeader("Content-Type", "application/pdf");
    res.setHeader(
      "Content-Disposition",
      `attachment; filename="${encodeURIComponent(filename)}"`
    );

    const doc = new PDFDocument({ size: "A4", margin: 50 });
    doc.registerFont("TimesVN", fontPath);
    doc.font("TimesVN");
    doc.pipe(res);

    // ===== PH·∫¶N ƒê·∫¶U =====
    doc.fontSize(12).text("M·∫´u CT01 ban h√†nh theo Th√¥ng t∆∞ s·ªë 66/2023/TT-BCA", {
      align: "center",
    });
    doc.text("ng√†y 17/11/2023 c·ªßa B·ªô tr∆∞·ªüng B·ªô C√¥ng an", { align: "center" });
    doc.moveDown(1);

    doc
      .fontSize(16)
      .text("C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM", { align: "center" });
    doc
      .fontSize(14)
      .text("ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c", { align: "center", underline: true });
    doc.moveDown(1.5);

    doc
      .fontSize(16)
      .text("T·ªú KHAI THAY ƒê·ªîI TH√îNG TIN C∆Ø TR√ö", { align: "center", bold: true });
    doc.moveDown(2);

    // ===== N·ªòI DUNG =====
    const r = record.resident || {};
    doc.fontSize(12);
    doc.text(`1. H·ªç v√† t√™n: ${r.fullName || ".........................................."}`);
    doc.text(
      `2. Ng√†y, th√°ng, nƒÉm sinh: ${
        r.dateOfBirth
          ? new Date(r.dateOfBirth).toLocaleDateString("vi-VN")
          : "..............."
      }    3. Gi·ªõi t√≠nh: ...........`
    );
    doc.text(
      `4. S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá: ${
        r.phoneNumber || ".........................."
      }    5. Email: .....................................`
    );
    doc.text(
      `6. CƒÉn h·ªô: ${r.apartment?.apartmentCode || "N/A"} (T·∫ßng ${
        r.apartment?.floor || "?"
      })`
    );
    doc.text(
      `7. Lo·∫°i khai b√°o: ${record.type === "tam_tru" ? "T·∫°m tr√∫" : "T·∫°m v·∫Øng"}`
    );
    doc.text(
      `8. Th·ªùi gian: ${new Date(record.fromDate).toLocaleDateString(
        "vi-VN"
      )} ‚Üí ${new Date(record.toDate).toLocaleDateString("vi-VN")}`
    );
    doc.text(`9. L√Ω do: ${record.reason}`);
    doc.text(
      `10. N∆°i ${record.type === "tam_tru" ? "t·∫°m tr√∫" : "ƒë·∫øn"}: ${
        record.place
      }`
    );

    // ===== PH·∫¶N CH·ªÆ K√ù =====
    const pageWidth = doc.page.width;
    const margin = 50;
    const colWidth = (pageWidth - margin * 2) / 2;
    const spacing = 20;

    const today = new Date();
    const dateText = `..., ng√†y ${today.getDate()} th√°ng ${
      today.getMonth() + 1
    } nƒÉm ${today.getFullYear()}`;

    doc.moveDown(3);
    doc.fontSize(12).text(dateText, margin + colWidth, doc.y, { align: "center" });
    doc.moveDown(1.5);

    const startY = doc.y;

    // C·ªôt tr√°i
    doc.text("Ng∆∞·ªùi khai k√Ω v√† ghi r√µ h·ªç t√™n", margin, startY, { align: "center" });
    doc.text("(K√Ω, ghi r√µ h·ªç t√™n)", margin, startY + spacing, { align: "center" });

    // C·ªôt ph·∫£i
    doc.text("X√°c nh·∫≠n c·ªßa Ban qu·∫£n l√Ω", margin + colWidth, startY, { align: "center" });
    doc.text("(K√Ω, ghi r√µ h·ªç t√™n, ƒë√≥ng d·∫•u n·∫øu c√≥)", margin + colWidth, startY + spacing, { align: "center" });

    // Khung k√Ω
    const rectY = startY + spacing * 2;
    doc.rect(margin + 30, rectY, colWidth - 60, 60).stroke();
    doc.rect(margin + colWidth + 30, rectY, colWidth - 60, 60).stroke();

    doc.end();
  } catch (err) {
    console.error("‚ùå L·ªói trong exportPDF:", err);
    res.status(500).json({ message: err.message || "L·ªói khi xu·∫•t PDF" });
  }
});

/**
 * ‚ùå X√≥a h·ªì s∆° t·∫°m tr√∫ / t·∫°m v·∫Øng
 * DELETE /api/temp-residence/:id
 */
const deleteRecord = asyncHandler(async (req, res) => {
  try {
    const record = await TemporaryResidence.findById(req.params.id);
    if (!record) {
      res.status(404);
      throw new Error("Kh√¥ng t√¨m th·∫•y h·ªì s∆° t·∫°m tr√∫/t·∫°m v·∫Øng");
    }

    await record.deleteOne();
    res.json({ message: "H·ªì s∆° ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói trong deleteRecord:", err);
    res.status(500).json({ message: err.message || "L·ªói khi x√≥a h·ªì s∆°" });
  }
});

module.exports = {
  getAllRecords,
  createRecord,
  exportPDF,
  deleteRecord,
};
